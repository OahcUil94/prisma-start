// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { User } from '../addTypes'
import { AuthPayload } from '../addTypes'
import { UserSubscriptionPayload } from '../addTypes'
import { UserPreviousValues } from '../addTypes'
import { MutationResult } from '../addTypes'

import { Context } from '../addTypes'

type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export type UsersResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User[] | Promise<User[]>

  export interface Type {
    users: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User[] | Promise<User[]>
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    password: (parent: User) => parent.password,
  }

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type PasswordResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    password: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface ArgsSignup {
    name: string
    password: string
  }

  export interface ArgsLogin {
    name: string
    password: string
  }

  export type SignupResolver = (
    parent: {},
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | Promise<AuthPayload>

  export type LoginResolver = (
    parent: {},
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | Promise<AuthPayload>

  export interface Type {
    signup: (
      parent: {},
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | Promise<AuthPayload>

    login: (
      parent: {},
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | Promise<AuthPayload>
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user,
  }

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {}

  export type UserResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => UserSubscriptionPayload | null | Promise<UserSubscriptionPayload | null>

  export interface Type {
    user: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) =>
      | UserSubscriptionPayload
      | null
      | Promise<UserSubscriptionPayload | null>
  }
}

export namespace UserSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: UserSubscriptionPayload) => parent.mutation,
    node: (parent: UserSubscriptionPayload) =>
      parent.node === undefined ? null : parent.node,
    updatedFields: (parent: UserSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: UserSubscriptionPayload) =>
      parent.previousValues === undefined ? null : parent.previousValues,
  }

  export type MutationResolver = (
    parent: UserSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => MutationType | Promise<MutationType>

  export type NodeResolver = (
    parent: UserSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>

  export type UpdatedFieldsResolver = (
    parent: UserSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string[] | Promise<string[]>

  export type PreviousValuesResolver = (
    parent: UserSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => UserPreviousValues | null | Promise<UserPreviousValues | null>

  export interface Type {
    mutation: (
      parent: UserSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => MutationType | Promise<MutationType>

    node: (
      parent: UserSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>

    updatedFields: (
      parent: UserSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string[] | Promise<string[]>

    previousValues: (
      parent: UserSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => UserPreviousValues | null | Promise<UserPreviousValues | null>
  }
}

export namespace UserPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: UserPreviousValues) => parent.id,
    name: (parent: UserPreviousValues) => parent.name,
    password: (parent: UserPreviousValues) => parent.password,
  }

  export type IdResolver = (
    parent: UserPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type NameResolver = (
    parent: UserPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type PasswordResolver = (
    parent: UserPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export interface Type {
    id: (
      parent: UserPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    name: (
      parent: UserPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    password: (
      parent: UserPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>
  }
}

export namespace MutationResultResolvers {
  export const defaultResolvers = {
    success: (parent: MutationResult) => parent.success,
  }

  export type SuccessResolver = (
    parent: MutationResult,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>

  export interface Type {
    success: (
      parent: MutationResult,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  User: UserResolvers.Type
  Mutation: MutationResolvers.Type
  AuthPayload: AuthPayloadResolvers.Type
  Subscription: SubscriptionResolvers.Type
  UserSubscriptionPayload: UserSubscriptionPayloadResolvers.Type
  UserPreviousValues: UserPreviousValuesResolvers.Type
  MutationResult: MutationResultResolvers.Type
}
